ner_extraction_task:
  description: >
    Interpret the user's natural language query (NLQ) and extract only the SQL-relevant elements
    that are explicitly and unambiguously mentioned. This includes all SQL intents such as SELECT,
    INSERT, UPDATE, DELETE, CREATE, DROP, ALTER, etc. If something is not clearly stated,
    it must not be included.

  expected_output: >
    A structured JSON object that includes only the keys explicitly found in the user query.
    Valid keys may include:
    - intent
    - tables
    - columns
    - filters
    - joins
    - aggregations
    - group_by
    - order_by
    - limit
    - offset
    - subqueries
    - set_operations
    - negations
    - distinct
    - derived_metrics
    - clarifications

    Do NOT include any of the above keys if they are not mentioned by the user.

    You must never:
    - Assume defaults (e.g., limit: 10, offset: 0)
    - Include empty arrays or placeholder fields
    - Suggest values not clearly stated

    If the query does not contain any extractable SQL-relevant information, return an empty JSON object: `{}`

  agent: ner_agent


schema_mapping_task:
  description: >
    Using the provided schema(s), map all extracted user terms (columns, tables, filters, metrics) to actual fields across one or more schemas.

    You must:
    - Perform **exact case-sensitive matching** wherever possible.
    - If no exact match is found, use **fuzzy semantic matching** and rank the top candidates based on similarity.
    - For each user term, return a **list of possible schema fields** with a **confidence score between 0 and 1**.
    - Clearly **flag any ambiguities** or **multiple high-scoring matches** that may require clarification.
    - Never assume or invent fields not present in the schema.
    - The schema is provided as part of your input knowledge and may include multiple tables.

  expected_output: >
    A JSON object where each extracted term maps to:
    - a ranked list of matching schema fields (with scores), or
    - a clarification request if multiple matches have similar scores.
  agent: schema_mapper_agent

resolve_time_filter_task:
  description: >
    Your input is the JSON output from the schema_mapper_agent.
    This JSON contains matched_tables, column_mappings, join_suggestions, and more.

    Your job is to:
    1. Identify time expressions in the original user query (e.g., "today", "last 30 days", "Q2").
    2. Resolve those time expressions into actual dates using the time parser tool.
    3. Update ONLY the relevant parts of the schema_mapper_agentâ€™s output:
       - Inject the time expression into `column_mappings` using this format:
         "<time_expression>": {
           "column": "<schema_column>",
           "resolved_date": "<YYYY-MM-DD>"
         }
       - Set the `time_filter_column` to the selected schema column
       - Optionally add to `warnings` or `clarifications` if ambiguous
    4. Do NOT alter any other part of the structure. Return the updated full JSON.

  expected_output: >
    A complete JSON object identical to the schema_mapper_agent output,
    with only these updates:
    - time expressions mapped in column_mappings as nested objects
    - time_filter_column set
    - any necessary warnings or clarifications added
  agent: time_filter_agent

normalize_columns_task:
  description: >
    Take a structured JSON object containing extracted query mappings and validate every column reference
    using the provided schema knowledge base.

    Your job is to:
    - Ensure that every value in column_mappings refers to an actual column in the schema.
    - Normalize each mapping to a fully-qualified name (table.column).
    - Detect and correct casing mismatches, fuzzy phrasing, and aliases.
    - Do not hardcode or infer values. Only return mappings that exist in the schema.

    If a mapping is invalid or unclear:
      - Move it to unmapped_entities
      - Add a clarification entry to request user guidance

    Return the updated full JSON structure with corrected column_mappings and normalized fields only.
    Leave other keys (like matched_tables, time_filter_column, etc.) untouched.

  expected_output: >
    A dynamic JSON object with:
      - column_mappings: dictionary of valid schema-aligned column references
      - unmapped_entities: list of unresolved user terms
      - clarifications: questions for the user when ambiguity arises
      - warnings: optional notes on fallback logic, if used

    Do not include any hardcoded values. Everything must be derived from schema knowledge dynamically.
  agent: column_normalizer_agent


generate_sql_task:
  description: >
    Using the output from the previous agents (NER, schema mapping, normalization, filters), generate a valid SQL query that answers the user's question: "{topic}".
    Your query must account for joins, group by, time ranges, filters, and derived metrics when necessary.
  expected_output: >
    A single SQL query in code block format (```sql) followed by a brief explanation of its logic.
  agent: sql_generator_agent